module glad.glx.ext;


private import glad.glx.types;
private import glad.glx.enums;
private import glad.glx.funcs;
enum uint GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB = 0x20B2;
enum uint GLX_SHARE_CONTEXT_EXT = 0x800A;
enum uint GLX_VISUAL_ID_EXT = 0x800B;
enum uint GLX_SCREEN_EXT = 0x800C;
enum uint GLX_COVERAGE_SAMPLES_NV = 100001;
enum uint GLX_COLOR_SAMPLES_NV = 0x20B3;
enum uint GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
enum uint GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
enum uint GLX_PBUFFER_BIT_SGIX = 0x00000004;
enum uint GLX_BUFFER_CLOBBER_MASK_SGIX = 0x08000000;
enum uint GLX_FRONT_LEFT_BUFFER_BIT_SGIX = 0x00000001;
enum uint GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = 0x00000002;
enum uint GLX_BACK_LEFT_BUFFER_BIT_SGIX = 0x00000004;
enum uint GLX_BACK_RIGHT_BUFFER_BIT_SGIX = 0x00000008;
enum uint GLX_AUX_BUFFERS_BIT_SGIX = 0x00000010;
enum uint GLX_DEPTH_BUFFER_BIT_SGIX = 0x00000020;
enum uint GLX_STENCIL_BUFFER_BIT_SGIX = 0x00000040;
enum uint GLX_ACCUM_BUFFER_BIT_SGIX = 0x00000080;
enum uint GLX_SAMPLE_BUFFERS_BIT_SGIX = 0x00000100;
enum uint GLX_MAX_PBUFFER_WIDTH_SGIX = 0x8016;
enum uint GLX_MAX_PBUFFER_HEIGHT_SGIX = 0x8017;
enum uint GLX_MAX_PBUFFER_PIXELS_SGIX = 0x8018;
enum uint GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = 0x8019;
enum uint GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = 0x801A;
enum uint GLX_PRESERVED_CONTENTS_SGIX = 0x801B;
enum uint GLX_LARGEST_PBUFFER_SGIX = 0x801C;
enum uint GLX_WIDTH_SGIX = 0x801D;
enum uint GLX_HEIGHT_SGIX = 0x801E;
enum uint GLX_EVENT_MASK_SGIX = 0x801F;
enum uint GLX_DAMAGED_SGIX = 0x8020;
enum uint GLX_SAVED_SGIX = 0x8021;
enum uint GLX_WINDOW_SGIX = 0x8022;
enum uint GLX_PBUFFER_SGIX = 0x8023;
enum uint GLX_RGBA_FLOAT_TYPE_ARB = 0x20B9;
enum uint GLX_RGBA_FLOAT_BIT_ARB = 0x00000004;
enum uint GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 80;
enum uint GLX_BAD_HYPERPIPE_CONFIG_SGIX = 91;
enum uint GLX_BAD_HYPERPIPE_SGIX = 92;
enum uint GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = 0x00000001;
enum uint GLX_HYPERPIPE_RENDER_PIPE_SGIX = 0x00000002;
enum uint GLX_PIPE_RECT_SGIX = 0x00000001;
enum uint GLX_PIPE_RECT_LIMITS_SGIX = 0x00000002;
enum uint GLX_HYPERPIPE_STEREO_SGIX = 0x00000003;
enum uint GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = 0x00000004;
enum uint GLX_HYPERPIPE_ID_SGIX = 0x8030;
enum uint GLX_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;
enum uint GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = 0x04000000;
enum uint GLX_EXCHANGE_COMPLETE_INTEL = 0x8180;
enum uint GLX_COPY_COMPLETE_INTEL = 0x8181;
enum uint GLX_FLIP_COMPLETE_INTEL = 0x8182;
enum uint GLX_SYNC_FRAME_SGIX = 0x00000000;
enum uint GLX_SYNC_SWAP_SGIX = 0x00000001;
enum uint GLX_CONTEXT_ES2_PROFILE_BIT_EXT = 0x00000004;
enum uint GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x20B2;
enum uint GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT = 0x20B1;
enum uint GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT = 0x00000008;
enum uint GLX_BACK_BUFFER_AGE_EXT = 0x20F4;
enum uint GLX_SAMPLE_BUFFERS_3DFX = 0x8050;
enum uint GLX_SAMPLES_3DFX = 0x8051;
enum uint GLX_X_VISUAL_TYPE_EXT = 0x22;
enum uint GLX_TRANSPARENT_TYPE_EXT = 0x23;
enum uint GLX_TRANSPARENT_INDEX_VALUE_EXT = 0x24;
enum uint GLX_TRANSPARENT_RED_VALUE_EXT = 0x25;
enum uint GLX_TRANSPARENT_GREEN_VALUE_EXT = 0x26;
enum uint GLX_TRANSPARENT_BLUE_VALUE_EXT = 0x27;
enum uint GLX_TRANSPARENT_ALPHA_VALUE_EXT = 0x28;
enum uint GLX_NONE_EXT = 0x8000;
enum uint GLX_TRUE_COLOR_EXT = 0x8002;
enum uint GLX_DIRECT_COLOR_EXT = 0x8003;
enum uint GLX_PSEUDO_COLOR_EXT = 0x8004;
enum uint GLX_STATIC_COLOR_EXT = 0x8005;
enum uint GLX_GRAY_SCALE_EXT = 0x8006;
enum uint GLX_STATIC_GRAY_EXT = 0x8007;
enum uint GLX_TRANSPARENT_RGB_EXT = 0x8008;
enum uint GLX_TRANSPARENT_INDEX_EXT = 0x8009;
enum uint GLX_SAMPLE_BUFFERS_SGIS = 100000;
enum uint GLX_SAMPLES_SGIS = 100001;
enum uint GLX_3DFX_WINDOW_MODE_MESA = 0x1;
enum uint GLX_3DFX_FULLSCREEN_MODE_MESA = 0x2;
enum uint GLX_TEXTURE_1D_BIT_EXT = 0x00000001;
enum uint GLX_TEXTURE_2D_BIT_EXT = 0x00000002;
enum uint GLX_TEXTURE_RECTANGLE_BIT_EXT = 0x00000004;
enum uint GLX_BIND_TO_TEXTURE_RGB_EXT = 0x20D0;
enum uint GLX_BIND_TO_TEXTURE_RGBA_EXT = 0x20D1;
enum uint GLX_BIND_TO_MIPMAP_TEXTURE_EXT = 0x20D2;
enum uint GLX_BIND_TO_TEXTURE_TARGETS_EXT = 0x20D3;
enum uint GLX_Y_INVERTED_EXT = 0x20D4;
enum uint GLX_TEXTURE_FORMAT_EXT = 0x20D5;
enum uint GLX_TEXTURE_TARGET_EXT = 0x20D6;
enum uint GLX_MIPMAP_TEXTURE_EXT = 0x20D7;
enum uint GLX_TEXTURE_FORMAT_NONE_EXT = 0x20D8;
enum uint GLX_TEXTURE_FORMAT_RGB_EXT = 0x20D9;
enum uint GLX_TEXTURE_FORMAT_RGBA_EXT = 0x20DA;
enum uint GLX_TEXTURE_1D_EXT = 0x20DB;
enum uint GLX_TEXTURE_2D_EXT = 0x20DC;
enum uint GLX_TEXTURE_RECTANGLE_EXT = 0x20DD;
enum uint GLX_FRONT_LEFT_EXT = 0x20DE;
enum uint GLX_FRONT_RIGHT_EXT = 0x20DF;
enum uint GLX_BACK_LEFT_EXT = 0x20E0;
enum uint GLX_BACK_RIGHT_EXT = 0x20E1;
enum uint GLX_FRONT_EXT = 0x20DE;
enum uint GLX_BACK_EXT = 0x20E0;
enum uint GLX_AUX0_EXT = 0x20E2;
enum uint GLX_AUX1_EXT = 0x20E3;
enum uint GLX_AUX2_EXT = 0x20E4;
enum uint GLX_AUX3_EXT = 0x20E5;
enum uint GLX_AUX4_EXT = 0x20E6;
enum uint GLX_AUX5_EXT = 0x20E7;
enum uint GLX_AUX6_EXT = 0x20E8;
enum uint GLX_AUX7_EXT = 0x20E9;
enum uint GLX_AUX8_EXT = 0x20EA;
enum uint GLX_AUX9_EXT = 0x20EB;
enum uint GLX_DEVICE_ID_NV = 0x20CD;
enum uint GLX_UNIQUE_ID_NV = 0x20CE;
enum uint GLX_NUM_VIDEO_CAPTURE_SLOTS_NV = 0x20CF;
enum uint GLX_SAMPLE_BUFFERS_ARB = 100000;
enum uint GLX_SAMPLES_ARB = 100001;
enum uint GLX_SWAP_INTERVAL_EXT = 0x20F1;
enum uint GLX_MAX_SWAP_INTERVAL_EXT = 0x20F2;
enum uint GLX_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
enum uint GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
enum uint GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
enum uint GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
enum uint GLX_CONTEXT_FLAGS_ARB = 0x2094;
enum uint GLX_CONTEXT_ES_PROFILE_BIT_EXT = 0x00000004;
enum uint GLX_WINDOW_BIT_SGIX = 0x00000001;
enum uint GLX_PIXMAP_BIT_SGIX = 0x00000002;
enum uint GLX_RGBA_BIT_SGIX = 0x00000001;
enum uint GLX_COLOR_INDEX_BIT_SGIX = 0x00000002;
enum uint GLX_DRAWABLE_TYPE_SGIX = 0x8010;
enum uint GLX_RENDER_TYPE_SGIX = 0x8011;
enum uint GLX_X_RENDERABLE_SGIX = 0x8012;
enum uint GLX_FBCONFIG_ID_SGIX = 0x8013;
enum uint GLX_RGBA_TYPE_SGIX = 0x8014;
enum uint GLX_COLOR_INDEX_TYPE_SGIX = 0x8015;
enum uint GLX_VISUAL_SELECT_GROUP_SGIX = 0x8028;
enum uint GLX_VIDEO_OUT_COLOR_NV = 0x20C3;
enum uint GLX_VIDEO_OUT_ALPHA_NV = 0x20C4;
enum uint GLX_VIDEO_OUT_DEPTH_NV = 0x20C5;
enum uint GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV = 0x20C6;
enum uint GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV = 0x20C7;
enum uint GLX_VIDEO_OUT_FRAME_NV = 0x20C8;
enum uint GLX_VIDEO_OUT_FIELD_1_NV = 0x20C9;
enum uint GLX_VIDEO_OUT_FIELD_2_NV = 0x20CA;
enum uint GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
enum uint GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;
enum uint GLX_BLENDED_RGBA_SGIS = 0x8025;
enum uint GLX_DIGITAL_MEDIA_PBUFFER_SGIX = 0x8024;
enum uint GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
enum uint GLX_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
enum uint GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
enum uint GLX_NO_RESET_NOTIFICATION_ARB = 0x8261;
enum uint GLX_LATE_SWAPS_TEAR_EXT = 0x20F3;
enum uint GLX_VISUAL_CAVEAT_EXT = 0x20;
enum uint GLX_SLOW_VISUAL_EXT = 0x8001;
enum uint GLX_NON_CONFORMANT_VISUAL_EXT = 0x800D;
enum uint GLX_FLOAT_COMPONENTS_NV = 0x20B0;
enum uint GLX_SWAP_METHOD_OML = 0x8060;
enum uint GLX_SWAP_EXCHANGE_OML = 0x8061;
enum uint GLX_SWAP_COPY_OML = 0x8062;
enum uint GLX_SWAP_UNDEFINED_OML = 0x8063;
enum uint GLX_NUM_VIDEO_SLOTS_NV = 0x20F0;
enum uint GLX_GPU_VENDOR_AMD = 0x1F00;
enum uint GLX_GPU_RENDERER_STRING_AMD = 0x1F01;
enum uint GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
enum uint GLX_GPU_FASTEST_TARGET_GPUS_AMD = 0x21A2;
enum uint GLX_GPU_RAM_AMD = 0x21A3;
enum uint GLX_GPU_CLOCK_AMD = 0x21A4;
enum uint GLX_GPU_NUM_PIPES_AMD = 0x21A5;
enum uint GLX_GPU_NUM_SIMD_AMD = 0x21A6;
enum uint GLX_GPU_NUM_RB_AMD = 0x21A7;
enum uint GLX_GPU_NUM_SPI_AMD = 0x21A8;
enum uint GLX_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
enum uint GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
enum uint GLX_CONTEXT_PROFILE_MASK_ARB = 0x9126;
enum uint GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB = 0x2095;
nothrow extern(System) {
alias fp_glXGetCurrentDisplayEXT = Display* function();
alias fp_glXQueryContextInfoEXT = int function(Display*, GLXContext, int, int*);
alias fp_glXGetContextIDEXT = GLXContextID function(const(GLXContext));
alias fp_glXImportContextEXT = GLXContext function(Display*, GLXContextID);
alias fp_glXFreeContextEXT = void function(Display*, GLXContext);
alias fp_glXCreateGLXPbufferSGIX = GLXPbufferSGIX function(Display*, GLXFBConfigSGIX, uint, uint, int*);
alias fp_glXDestroyGLXPbufferSGIX = void function(Display*, GLXPbufferSGIX);
alias fp_glXQueryGLXPbufferSGIX = int function(Display*, GLXPbufferSGIX, int, uint*);
alias fp_glXSelectEventSGIX = void function(Display*, GLXDrawable, ulong);
alias fp_glXGetSelectedEventSGIX = void function(Display*, GLXDrawable, ulong*);
alias fp_glXJoinSwapGroupNV = Bool function(Display*, GLXDrawable, GLuint);
alias fp_glXBindSwapBarrierNV = Bool function(Display*, GLuint, GLuint);
alias fp_glXQuerySwapGroupNV = Bool function(Display*, GLXDrawable, GLuint*, GLuint*);
alias fp_glXQueryMaxSwapGroupsNV = Bool function(Display*, int, GLuint*, GLuint*);
alias fp_glXQueryFrameCountNV = Bool function(Display*, int, GLuint*);
alias fp_glXResetFrameCountNV = Bool function(Display*, int);
alias fp_glXQueryHyperpipeNetworkSGIX = GLXHyperpipeNetworkSGIX* function(Display*, int*);
alias fp_glXHyperpipeConfigSGIX = int function(Display*, int, int, GLXHyperpipeConfigSGIX*, int*);
alias fp_glXQueryHyperpipeConfigSGIX = GLXHyperpipeConfigSGIX* function(Display*, int, int*);
alias fp_glXDestroyHyperpipeConfigSGIX = int function(Display*, int);
alias fp_glXBindHyperpipeSGIX = int function(Display*, int);
alias fp_glXQueryHyperpipeBestAttribSGIX = int function(Display*, int, int, int, void*, void*);
alias fp_glXHyperpipeAttribSGIX = int function(Display*, int, int, int, void*);
alias fp_glXQueryHyperpipeAttribSGIX = int function(Display*, int, int, int, void*);
alias fp_glXBindChannelToWindowSGIX = int function(Display*, int, int, Window);
alias fp_glXChannelRectSGIX = int function(Display*, int, int, int, int, int, int);
alias fp_glXQueryChannelRectSGIX = int function(Display*, int, int, int*, int*, int*, int*);
alias fp_glXQueryChannelDeltasSGIX = int function(Display*, int, int, int*, int*, int*, int*);
alias fp_glXChannelRectSyncSGIX = int function(Display*, int, int, GLenum);
alias fp_glXCopyImageSubDataNV = void function(Display*, GLXContext, GLuint, GLenum, GLint, GLint, GLint, GLint, GLXContext, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
alias fp_glXGetSyncValuesOML = Bool function(Display*, GLXDrawable, int64_t*, int64_t*, int64_t*);
alias fp_glXGetMscRateOML = Bool function(Display*, GLXDrawable, int32_t*, int32_t*);
alias fp_glXSwapBuffersMscOML = int64_t function(Display*, GLXDrawable, int64_t, int64_t, int64_t);
alias fp_glXWaitForMscOML = Bool function(Display*, GLXDrawable, int64_t, int64_t, int64_t, int64_t*, int64_t*, int64_t*);
alias fp_glXWaitForSbcOML = Bool function(Display*, GLXDrawable, int64_t, int64_t*, int64_t*, int64_t*);
alias fp_glXMakeCurrentReadSGI = Bool function(Display*, GLXDrawable, GLXDrawable, GLXContext);
alias fp_glXGetCurrentReadDrawableSGI = GLXDrawable function();
alias fp_glXSwapIntervalSGI = int function(int);
alias fp_glXGetVideoSyncSGI = int function(uint*);
alias fp_glXWaitVideoSyncSGI = int function(int, int, uint*);
alias fp_glXGetAGPOffsetMESA = uint function(const(void)*);
alias fp_glXSet3DfxModeMESA = Bool function(int);
alias fp_glXBindTexImageEXT = void function(Display*, GLXDrawable, int, const(int)*);
alias fp_glXReleaseTexImageEXT = void function(Display*, GLXDrawable, int);
alias fp_glXBindVideoCaptureDeviceNV = int function(Display*, uint, GLXVideoCaptureDeviceNV);
alias fp_glXEnumerateVideoCaptureDevicesNV = GLXVideoCaptureDeviceNV* function(Display*, int, int*);
alias fp_glXLockVideoCaptureDeviceNV = void function(Display*, GLXVideoCaptureDeviceNV);
alias fp_glXQueryVideoCaptureDeviceNV = int function(Display*, GLXVideoCaptureDeviceNV, int, int*);
alias fp_glXReleaseVideoCaptureDeviceNV = void function(Display*, GLXVideoCaptureDeviceNV);
alias fp_glXJoinSwapGroupSGIX = void function(Display*, GLXDrawable, GLXDrawable);
alias fp_glXSwapIntervalEXT = void function(Display*, GLXDrawable, int);
alias fp_glXCreateGLXVideoSourceSGIX = GLXVideoSourceSGIX function(Display*, int, VLServer, VLPath, int, VLNode);
alias fp_glXDestroyGLXVideoSourceSGIX = void function(Display*, GLXVideoSourceSGIX);
alias fp_glXCreateContextAttribsARB = GLXContext function(Display*, GLXFBConfig, GLXContext, Bool, const(int)*);
alias fp_glXGetFBConfigAttribSGIX = int function(Display*, GLXFBConfigSGIX, int, int*);
alias fp_glXChooseFBConfigSGIX = GLXFBConfigSGIX* function(Display*, int, int*, int*);
alias fp_glXCreateGLXPixmapWithConfigSGIX = GLXPixmap function(Display*, GLXFBConfigSGIX, Pixmap);
alias fp_glXCreateContextWithConfigSGIX = GLXContext function(Display*, GLXFBConfigSGIX, int, GLXContext, Bool);
alias fp_glXGetVisualFromFBConfigSGIX = XVisualInfo* function(Display*, GLXFBConfigSGIX);
alias fp_glXGetFBConfigFromVisualSGIX = GLXFBConfigSGIX function(Display*, XVisualInfo*);
alias fp_glXCreateGLXPixmapMESA = GLXPixmap function(Display*, XVisualInfo*, Pixmap, Colormap);
alias fp_glXGetVideoDeviceNV = int function(Display*, int, int, GLXVideoDeviceNV*);
alias fp_glXReleaseVideoDeviceNV = int function(Display*, int, GLXVideoDeviceNV);
alias fp_glXBindVideoImageNV = int function(Display*, GLXVideoDeviceNV, GLXPbuffer, int);
alias fp_glXReleaseVideoImageNV = int function(Display*, GLXPbuffer);
alias fp_glXSendPbufferToVideoNV = int function(Display*, GLXPbuffer, int, ulong*, GLboolean);
alias fp_glXGetVideoInfoNV = int function(Display*, int, GLXVideoDeviceNV, ulong*, ulong*);
alias fp_glXAssociateDMPbufferSGIX = Bool function(Display*, GLXPbufferSGIX, DMparams*, DMbuffer);
alias fp_glXBindSwapBarrierSGIX = void function(Display*, GLXDrawable, int);
alias fp_glXQueryMaxSwapBarriersSGIX = Bool function(Display*, int, int*);
alias fp_glXReleaseBuffersMESA = Bool function(Display*, GLXDrawable);
alias fp_glXCopySubBufferMESA = void function(Display*, GLXDrawable, int, int, int, int);
alias fp_glXCushionSGI = void function(Display*, Window, float);
alias fp_glXEnumerateVideoDevicesNV = uint* function(Display*, int, int*);
alias fp_glXBindVideoDeviceNV = int function(Display*, uint, uint, const(int)*);
alias fp_glXGetTransparentIndexSUN = Status function(Display*, Window, Window, long*);
alias fp_glXGetProcAddressARB = __GLXextFuncPtr function(const(GLubyte)*);
}
__gshared {
fp_glXGetContextIDEXT glXGetContextIDEXT;
fp_glXGetFBConfigFromVisualSGIX glXGetFBConfigFromVisualSGIX;
fp_glXBindSwapBarrierNV glXBindSwapBarrierNV;
fp_glXQueryChannelRectSGIX glXQueryChannelRectSGIX;
fp_glXQueryMaxSwapGroupsNV glXQueryMaxSwapGroupsNV;
fp_glXGetCurrentDisplayEXT glXGetCurrentDisplayEXT;
fp_glXLockVideoCaptureDeviceNV glXLockVideoCaptureDeviceNV;
fp_glXQueryHyperpipeAttribSGIX glXQueryHyperpipeAttribSGIX;
fp_glXGetProcAddressARB glXGetProcAddressARB;
fp_glXSendPbufferToVideoNV glXSendPbufferToVideoNV;
fp_glXEnumerateVideoCaptureDevicesNV glXEnumerateVideoCaptureDevicesNV;
fp_glXCopySubBufferMESA glXCopySubBufferMESA;
fp_glXSwapBuffersMscOML glXSwapBuffersMscOML;
fp_glXSwapIntervalEXT glXSwapIntervalEXT;
fp_glXCreateGLXVideoSourceSGIX glXCreateGLXVideoSourceSGIX;
fp_glXGetSelectedEventSGIX glXGetSelectedEventSGIX;
fp_glXQueryMaxSwapBarriersSGIX glXQueryMaxSwapBarriersSGIX;
fp_glXGetFBConfigAttribSGIX glXGetFBConfigAttribSGIX;
fp_glXQueryChannelDeltasSGIX glXQueryChannelDeltasSGIX;
fp_glXReleaseTexImageEXT glXReleaseTexImageEXT;
fp_glXJoinSwapGroupNV glXJoinSwapGroupNV;
fp_glXCreateGLXPbufferSGIX glXCreateGLXPbufferSGIX;
fp_glXCreateContextWithConfigSGIX glXCreateContextWithConfigSGIX;
fp_glXQueryVideoCaptureDeviceNV glXQueryVideoCaptureDeviceNV;
fp_glXGetSyncValuesOML glXGetSyncValuesOML;
fp_glXHyperpipeConfigSGIX glXHyperpipeConfigSGIX;
fp_glXCreateContextAttribsARB glXCreateContextAttribsARB;
fp_glXFreeContextEXT glXFreeContextEXT;
fp_glXReleaseVideoImageNV glXReleaseVideoImageNV;
fp_glXSwapIntervalSGI glXSwapIntervalSGI;
fp_glXChannelRectSyncSGIX glXChannelRectSyncSGIX;
fp_glXGetVisualFromFBConfigSGIX glXGetVisualFromFBConfigSGIX;
fp_glXWaitVideoSyncSGI glXWaitVideoSyncSGI;
fp_glXGetVideoSyncSGI glXGetVideoSyncSGI;
fp_glXEnumerateVideoDevicesNV glXEnumerateVideoDevicesNV;
fp_glXBindHyperpipeSGIX glXBindHyperpipeSGIX;
fp_glXBindTexImageEXT glXBindTexImageEXT;
fp_glXResetFrameCountNV glXResetFrameCountNV;
fp_glXBindVideoCaptureDeviceNV glXBindVideoCaptureDeviceNV;
fp_glXBindChannelToWindowSGIX glXBindChannelToWindowSGIX;
fp_glXSelectEventSGIX glXSelectEventSGIX;
fp_glXChannelRectSGIX glXChannelRectSGIX;
fp_glXImportContextEXT glXImportContextEXT;
fp_glXGetTransparentIndexSUN glXGetTransparentIndexSUN;
fp_glXReleaseVideoCaptureDeviceNV glXReleaseVideoCaptureDeviceNV;
fp_glXHyperpipeAttribSGIX glXHyperpipeAttribSGIX;
fp_glXQueryHyperpipeBestAttribSGIX glXQueryHyperpipeBestAttribSGIX;
fp_glXCreateGLXPixmapWithConfigSGIX glXCreateGLXPixmapWithConfigSGIX;
fp_glXWaitForMscOML glXWaitForMscOML;
fp_glXQueryContextInfoEXT glXQueryContextInfoEXT;
fp_glXGetMscRateOML glXGetMscRateOML;
fp_glXQueryGLXPbufferSGIX glXQueryGLXPbufferSGIX;
fp_glXJoinSwapGroupSGIX glXJoinSwapGroupSGIX;
fp_glXReleaseBuffersMESA glXReleaseBuffersMESA;
fp_glXSet3DfxModeMESA glXSet3DfxModeMESA;
fp_glXAssociateDMPbufferSGIX glXAssociateDMPbufferSGIX;
fp_glXBindVideoDeviceNV glXBindVideoDeviceNV;
fp_glXGetVideoInfoNV glXGetVideoInfoNV;
fp_glXBindSwapBarrierSGIX glXBindSwapBarrierSGIX;
fp_glXReleaseVideoDeviceNV glXReleaseVideoDeviceNV;
fp_glXWaitForSbcOML glXWaitForSbcOML;
fp_glXDestroyGLXPbufferSGIX glXDestroyGLXPbufferSGIX;
fp_glXCreateGLXPixmapMESA glXCreateGLXPixmapMESA;
fp_glXGetVideoDeviceNV glXGetVideoDeviceNV;
fp_glXDestroyGLXVideoSourceSGIX glXDestroyGLXVideoSourceSGIX;
fp_glXCopyImageSubDataNV glXCopyImageSubDataNV;
fp_glXChooseFBConfigSGIX glXChooseFBConfigSGIX;
fp_glXQueryHyperpipeConfigSGIX glXQueryHyperpipeConfigSGIX;
fp_glXCushionSGI glXCushionSGI;
fp_glXQueryHyperpipeNetworkSGIX glXQueryHyperpipeNetworkSGIX;
fp_glXMakeCurrentReadSGI glXMakeCurrentReadSGI;
fp_glXGetAGPOffsetMESA glXGetAGPOffsetMESA;
fp_glXDestroyHyperpipeConfigSGIX glXDestroyHyperpipeConfigSGIX;
fp_glXQuerySwapGroupNV glXQuerySwapGroupNV;
fp_glXBindVideoImageNV glXBindVideoImageNV;
fp_glXQueryFrameCountNV glXQueryFrameCountNV;
fp_glXGetCurrentReadDrawableSGI glXGetCurrentReadDrawableSGI;
}
